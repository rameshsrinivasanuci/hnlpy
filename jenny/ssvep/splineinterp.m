function varargout = splineinterp(w,x,xs,varargin)%% mat = splineinterp(w,x,xs)%% SPLINEINTERP creates a matrix to interpolate data by left-multiplying% the data by this matrix.%% mat*data = interpolation of data%%   w: characteristic channel distance (scalar or m x n)%   x: m x 3 input x,y,z values%  xs: n x 3 output x,y,z values%% mat: m x n spline interpolation transform matrix%% See also: SPLINEMAKE, SPLINENLAP%% Copyright (C) 2005 Bill Winter, <wwinter@hs.uci.edu>%% This program is free software: you can redistribute it and/or modify% it under the terms of the GNU General Public License as published by% the Free Software Foundation, either version 3 of the License, or% (at your option) any later version.%% This program is distributed in the hope that it will be useful,% but WITHOUT ANY WARRANTY; without even the implied warranty of% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the% GNU General Public License for more details.%% You should have received a copy of the GNU General Public License% along with this program.  If not, see <http://www.gnu.org/licenses/>.%% Written by Bill Winter, December 2005[n N] = size(x);                        %#ok<NASGU>r = repmat(sum(x.^2,2),1,n);            % radius squaredk = w.^2 + abs(r + r.' - 2.*x*x');k = k.^2.*log(k);e = [ones(n,1) ...                      % e, spline osculating function     x(:,1) ...     x(:,2) ...     x(:,1).^2 ...     x(:,1).*x(:,2) ...     x(:,2).^2 ...     x(:,3) ...     x(:,1).*x(:,3) ...     x(:,2).*x(:,3) ...     x(:,3).^2];ns = size(xs,1);es = [ones(ns,1) ...                    % es, spline osculating function     xs(:,1) ...     xs(:,2) ...     xs(:,1).^2 ...     xs(:,1).*xs(:,2) ...     xs(:,2).^2 ...     xs(:,3) ...     xs(:,1).*xs(:,3) ...     xs(:,2).*xs(:,3) ...     xs(:,3).^2]; w = w.^2 + abs(repmat(r(:,1)',ns,1) + repmat(sum(xs.^2,2),1,n) - 2.*xs*x');ks = w.^2.*log(w);[varargout{1:nargout}] = splinemake(e,es,k,ks,varargin{:});